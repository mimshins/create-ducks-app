/* eslint-disable no-console */

import spawn from "cross-spawn";
import isOnline from "is-online";
import * as FS from "node:fs";
import * as Path from "node:path";
import * as Process from "node:process";
import FMT from "picocolors";
import type { DucksConfig, Package, PackageManager } from "../types";
import { kebabToPascal } from "./format-kebab";

const DESCRIPTION_PLACEHOLDER =
  "This is auto-generated by `create-ducks-app` cli tool.";

const installPackage = async (
  packageManager: PackageManager,
): Promise<void> => {
  const isOffline = !(await isOnline());

  const args: string[] = ["install"];

  if (isOffline) {
    console.log(
      FMT.yellow(
        ["You appear to be offline.", "Falling back to the local cache."].join(
          "\n",
        ),
      ),
    );

    args.push("--offline");
  }

  console.log(Process.cwd());

  return new Promise((resolve, reject) => {
    const child = spawn(packageManager, args, {
      stdio: "inherit",
      env: {
        ...Process.env,
        ADBLOCK: "1",
        // We set `NODE_ENV` to development as pnpm skips dev
        // dependencies when production
        NODE_ENV: "development",
        DISABLE_OPENCOLLECTIVE: "1",
      },
    });

    child.on("close", code => {
      if (code !== 0) {
        reject(void 0);
        return;
      }

      resolve(void 0);
    });
  });
};

const createPackage = async (root: string, appName: string) => {
  const packageJson: Package = {
    name: appName,
    version: "0.1.0",
    description: DESCRIPTION_PLACEHOLDER,
    license: "UNLICENSED",
    type: "module",
    scripts: {
      build: "ducks-cli build",
      preview: "ducks-cli preview",
    },
    devDependencies: {
      "ducks-cli": "latest",
    },
  };

  const packageFile = Path.join(root, "package.json");

  await FS.promises.writeFile(
    packageFile,
    JSON.stringify(packageJson, null, 2),
  );

  const gitIgnoreFile = Path.join(root, ".gitignore");

  if (FS.existsSync(gitIgnoreFile)) {
    const fileContent = await FS.promises.readFile(gitIgnoreFile, {
      encoding: "utf-8",
    });

    if (!fileContent.includes(".ducks")) {
      await FS.promises.appendFile(gitIgnoreFile, ".ducks");
    }
  } else {
    await FS.promises.writeFile(
      gitIgnoreFile,
      [
        "node_modules",
        ".ducks",
        "logs",
        "*.log",
        "npm-debug.log*",
        "yarn-debug.log*",
        "yarn-error.log*",
        ".pnpm-debug.log*",
        "*.tsbuildinfo",
        ".npm",
        ".eslintcache",
        ".env",
        ".env.development.local",
        ".env.test.local",
        ".env.production.local",
        ".env.local",
      ].join("\n"),
    );
  }
};

const createConfigFile = async (root: string, appName: string) => {
  const config: DucksConfig = {
    name: kebabToPascal(appName),
    description: DESCRIPTION_PLACEHOLDER,
  };

  const configFile = Path.join(root, "ducks.config.json");

  await FS.promises.writeFile(configFile, JSON.stringify(config, null, 2));
};

const createPublicDirectory = async (root: string) => {
  const publicDirectory = Path.join(root, "public");

  await FS.promises.mkdir(publicDirectory);
};

const createViewsDirectory = async (root: string, appName: string) => {
  const viewsDirectory = Path.join(root, "views");

  await FS.promises.mkdir(viewsDirectory);

  const indexMarkdownFile = Path.join(viewsDirectory, "index.md");
  const markdownContent = [
    `#${kebabToPascal(appName)}`,
    DESCRIPTION_PLACEHOLDER,
  ].join("\n");

  await FS.promises.writeFile(indexMarkdownFile, markdownContent);
};

export const installTemplate = async (params: {
  appPath: string;
  appName: string;
  root: string;
  packageManager: PackageManager;
  skipInstall: boolean;
}) => {
  const { appName, appPath, packageManager, root, skipInstall } = params;

  console.log(`Creating a new Ducks app in ${FMT.green(root)}.`);

  await createPackage(root, appName);
  await createConfigFile(root, appName);
  await createPublicDirectory(root);
  await createViewsDirectory(root, appName);

  const originalDirectory = Process.cwd();

  if (!skipInstall) {
    Process.chdir(root);

    console.log();
    console.log("Installing package.");

    await installPackage(packageManager);
  } else {
    console.log();
    console.log(
      "Install is skipped due to explicitly passing `--skip-install` option.",
    );

    let cdpath: string;

    if (Path.join(originalDirectory, appName) === appPath) {
      cdpath = appName;
    } else {
      cdpath = appPath;
    }

    console.log("You have to install the package manually by typing:");
    console.log(
      `${FMT.cyan("  cd")} ${cdpath} && ${FMT.cyan(`${packageManager} install`)}`,
    );
  }
};
